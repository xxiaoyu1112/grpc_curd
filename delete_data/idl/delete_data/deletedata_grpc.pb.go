// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package delete_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeleteDataManageClient is the client API for DeleteDataManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteDataManageClient interface {
	DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error)
}

type deleteDataManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteDataManageClient(cc grpc.ClientConnInterface) DeleteDataManageClient {
	return &deleteDataManageClient{cc}
}

func (c *deleteDataManageClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	out := new(DeleteDataResponse)
	err := c.cc.Invoke(ctx, "/delete_data.DeleteDataManage/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteDataManageServer is the server API for DeleteDataManage service.
// All implementations must embed UnimplementedDeleteDataManageServer
// for forward compatibility
type DeleteDataManageServer interface {
	DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error)
	mustEmbedUnimplementedDeleteDataManageServer()
}

// UnimplementedDeleteDataManageServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteDataManageServer struct {
}

func (UnimplementedDeleteDataManageServer) DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedDeleteDataManageServer) mustEmbedUnimplementedDeleteDataManageServer() {}

// UnsafeDeleteDataManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteDataManageServer will
// result in compilation errors.
type UnsafeDeleteDataManageServer interface {
	mustEmbedUnimplementedDeleteDataManageServer()
}

func RegisterDeleteDataManageServer(s grpc.ServiceRegistrar, srv DeleteDataManageServer) {
	s.RegisterService(&DeleteDataManage_ServiceDesc, srv)
}

func _DeleteDataManage_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteDataManageServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delete_data.DeleteDataManage/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteDataManageServer).DeleteData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteDataManage_ServiceDesc is the grpc.ServiceDesc for DeleteDataManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteDataManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delete_data.DeleteDataManage",
	HandlerType: (*DeleteDataManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteData",
			Handler:    _DeleteDataManage_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deletedata.proto",
}
