// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package get_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetDataCollectClient is the client API for GetDataCollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetDataCollectClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
}

type getDataCollectClient struct {
	cc grpc.ClientConnInterface
}

func NewGetDataCollectClient(cc grpc.ClientConnInterface) GetDataCollectClient {
	return &getDataCollectClient{cc}
}

func (c *getDataCollectClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/getdata.GetDataCollect/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetDataCollectServer is the server API for GetDataCollect service.
// All implementations must embed UnimplementedGetDataCollectServer
// for forward compatibility
type GetDataCollectServer interface {
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	mustEmbedUnimplementedGetDataCollectServer()
}

// UnimplementedGetDataCollectServer must be embedded to have forward compatible implementations.
type UnimplementedGetDataCollectServer struct {
}

func (UnimplementedGetDataCollectServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedGetDataCollectServer) mustEmbedUnimplementedGetDataCollectServer() {}

// UnsafeGetDataCollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetDataCollectServer will
// result in compilation errors.
type UnsafeGetDataCollectServer interface {
	mustEmbedUnimplementedGetDataCollectServer()
}

func RegisterGetDataCollectServer(s grpc.ServiceRegistrar, srv GetDataCollectServer) {
	s.RegisterService(&GetDataCollect_ServiceDesc, srv)
}

func _GetDataCollect_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDataCollectServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdata.GetDataCollect/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDataCollectServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetDataCollect_ServiceDesc is the grpc.ServiceDesc for GetDataCollect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetDataCollect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getdata.GetDataCollect",
	HandlerType: (*GetDataCollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _GetDataCollect_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getdata.proto",
}

// GetOneStatusClient is the client API for GetOneStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetOneStatusClient interface {
	GetOne(ctx context.Context, in *GetOneStatusRequest, opts ...grpc.CallOption) (*GetOneStatusResponse, error)
}

type getOneStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewGetOneStatusClient(cc grpc.ClientConnInterface) GetOneStatusClient {
	return &getOneStatusClient{cc}
}

func (c *getOneStatusClient) GetOne(ctx context.Context, in *GetOneStatusRequest, opts ...grpc.CallOption) (*GetOneStatusResponse, error) {
	out := new(GetOneStatusResponse)
	err := c.cc.Invoke(ctx, "/getdata.GetOneStatus/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetOneStatusServer is the server API for GetOneStatus service.
// All implementations must embed UnimplementedGetOneStatusServer
// for forward compatibility
type GetOneStatusServer interface {
	GetOne(context.Context, *GetOneStatusRequest) (*GetOneStatusResponse, error)
	mustEmbedUnimplementedGetOneStatusServer()
}

// UnimplementedGetOneStatusServer must be embedded to have forward compatible implementations.
type UnimplementedGetOneStatusServer struct {
}

func (UnimplementedGetOneStatusServer) GetOne(context.Context, *GetOneStatusRequest) (*GetOneStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedGetOneStatusServer) mustEmbedUnimplementedGetOneStatusServer() {}

// UnsafeGetOneStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetOneStatusServer will
// result in compilation errors.
type UnsafeGetOneStatusServer interface {
	mustEmbedUnimplementedGetOneStatusServer()
}

func RegisterGetOneStatusServer(s grpc.ServiceRegistrar, srv GetOneStatusServer) {
	s.RegisterService(&GetOneStatus_ServiceDesc, srv)
}

func _GetOneStatus_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetOneStatusServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getdata.GetOneStatus/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetOneStatusServer).GetOne(ctx, req.(*GetOneStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetOneStatus_ServiceDesc is the grpc.ServiceDesc for GetOneStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetOneStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getdata.GetOneStatus",
	HandlerType: (*GetOneStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _GetOneStatus_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getdata.proto",
}
